#pragma once
#include "Figure.h"
#include "Point.h"
#include "Comands.h"

/* содержит класс SnakeClass - змека, за которую играем */

class SnakeClass : public Figure
{
public: Direction m_direction;	//направление в котором двигается змейка

public:
	/* Конструктор класса. Он принимает следующие параметры:
	 * tail - объект класса Point, всегда имеет координату ХВОСТА змеки;
	 * length - длина змеки(по умолчанию сделаем 4);
	 * direction - направление в котором змейка будет двигаться при началле игры(по умолчанию сделаем ВПРАВО)
	 * сама змейка представляется вектором, длинной length*/
	SnakeClass(Point tail, int length = 4, Direction _direction = Direction::RIGHT);
	~SnakeClass();

	/* метод, описывающий перемещение змейки следующим способом:
	 * из вектора извлекается 0-й элемент-хвост;
	 * хвост удаляется из вектора;
	 * создается точка-голова путем вызова функции GetNextPoint;
	 * новыя голова добавляется в конец вектора;
	 * хвост стирается с экрана, а новая голова отрисовывается */
	void Move();
	
	/* метод создающий новую голову змейки, иметируя движение змейки:
	 * из вектора извлекается последний элемент;
	 * создается его копия, которая смещается на 1 в сохраненном направлении;
	 * новая голова возвращается в вызывающую функцию*/
	Point GetNextPoint();

	/* метод, изменяющий направление движения змейки */
	void ChangeDirection(/*int*/ KEYS _key);

	/* метод сигнализирующий о том, что еда съедена;
	* узнаем где будет голова змейки в слудущий момент;
	* если координаты головы и еды(переданной как аргумент) совпали, то перерисовываем символ точки и добавляем в конец вектора */
	bool Eat(Point food);

	/* метод, проверяющий столкновение головы змейки с одной из точек ее тела
	 * для этого необходимо из вектора, которым описана змейка, извлечь последний элемент-голову;
	 * в цикле, вызывая метод проверки совпадения координат IsHit класса Point, проверяем солкновение головы с одной из точек тела */
	bool IsTailHit();
};

